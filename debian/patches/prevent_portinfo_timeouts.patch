Description:  Prevent Get(Portinfo) timeouts due to large trap traffic volume 
 Upstream patch.
Origin: vendor, https://github.com/intel/opa-fm/commit/86d2a898652529234a368706e711aaee438b9456
Last-Update: <2018-12-18>
---
This patch header follows DEP-3: http://dep.debian.net/deps/dep3/
--- a/Esm/ib/src/smi/sa/sa_Trap.c
+++ b/Esm/ib/src/smi/sa/sa_Trap.c
@@ -407,6 +407,13 @@
 	return 0;
 }
 
+static
+void _copy_CapMaskTrap(Port_t **portp, STL_TRAP_CHANGE_CAPABILITY_DATA *ccTrapRef) {
+	(*portp)->portData->portInfo.CapabilityMask.AsReg32 = ccTrapRef->CapabilityMask.AsReg32;
+	(*portp)->portData->portInfo.CapabilityMask3.AsReg16 = ccTrapRef->CapabilityMask3.AsReg16;
+}
+
+
 /*
  * Used for forwarding traps that came from the outside.
  * In this case the caller pass the incoming mai packet
@@ -552,88 +559,78 @@
 		sm_discovery_needed("Port State Change Trap", notice.IssuerLID);
 	} else if (notice.Attributes.Generic.TrapNumber == MAD_SMT_CAPABILITYMASK_CHANGE) {
 		STL_TRAP_CHANGE_CAPABILITY_DATA ccTrap;
+		STL_TRAP_CHANGE_CAPABILITY_DATA ccTrapRef;
 		
 		BSWAPCOPY_STL_TRAP_CHANGE_CAPABILITY_DATA((STL_TRAP_CHANGE_CAPABILITY_DATA*)notice.Data, &ccTrap);
 		sm_get_lid_info(desc, notice.IssuerLID);
 
 		if (ccTrap.u.AsReg16 == 0) {
+
+			memcpy(&ccTrapRef, &ccTrap, sizeof(STL_TRAP_CHANGE_CAPABILITY_DATA));
+
 			/* Change fields are zero so one of the capability bits must
  			 * have changed. Compare the new CapabilityMask/Mask3 to the previous
 			 * CapabilityMask/Mask3 for this port to determine the appropriate
 			 * action to take*/
-			(void)vs_wrlock(&old_topology_lock);
+			vs_wrlock(&old_topology_lock);
 			portp = sm_find_node_and_port_lid(&old_topology, notice.IssuerLID, &nodep);
 			if (nodep && sm_valid_port(portp)){
 
-				STL_PORT_INFO portInfo;
-				Status_t status;
-
 				//determine which bits in Capability Mask/Mask3 changed
 				ccTrap.CapabilityMask.AsReg32 ^= portp->portData->portInfo.CapabilityMask.AsReg32;
 				ccTrap.CapabilityMask3.AsReg16 ^= portp->portData->portInfo.CapabilityMask3.AsReg16;
 
-
 				if (ccTrap.CapabilityMask.s.IsSM){ //node's SM status changed, will need to trigger a sweep
-					if (!portp->portData->portInfo.CapabilityMask.s.IsSM){
+					if (ccTrapRef.CapabilityMask.s.IsSM){
 						IB_LOG_INFINI_INFO_FMT(__func__, 
 								"Received an (IS_SM on) CAPABILITYMASK CHANGE [0x%.8X] trap from %s, TID="FMT_U64,
-								ccTrap.CapabilityMask.AsReg32, desc, tid);
-						sm_discovery_needed("Port CapabilityMask Change isSM on", STL_LID_RESERVED);
+								ccTrapRef.CapabilityMask.AsReg32, desc, tid);
+						if (notice.IssuerLID != sm_lid){
+							sm_discovery_needed("Port CapabilityMask Change isSM on", STL_LID_RESERVED);
+						}
 					}else{
 						IB_LOG_INFINI_INFO_FMT(__func__, 
 								"Received an (IS_SM off) CAPABILITYMASK CHANGE [0x%.8X] trap from %s, TID="FMT_U64,
-								ccTrap.CapabilityMask.AsReg32, desc, tid);
+								ccTrapRef.CapabilityMask.AsReg32, desc, tid);
 						if (notice.IssuerLID != sm_lid){	
 							sm_discovery_needed("Port CapabilityMask Change isSM off", STL_LID_RESERVED);
 						}
 					}
 				}
 
-				// Get fresh port info
-				SmpAddr_t addr = SMP_ADDR_CREATE_LR(sm_lid, portp->portData->lid);
-				status = SM_Get_PortInfo(fd_async_request, (1 << 24) | portp->index, &addr, &portInfo);
-				if (status != VSTATUS_OK){
-					IB_LOG_WARN_FMT(__func__, 
-									"Cannot get PORTINFO for %s, TID="FMT_U64
-									" status=%d", desc, tid, status);
-				}else{
-					portp->portData->portInfo = portInfo;
-
-					/****************LOG BITS THAT CHANGED******************/
-					//portp->portData->portInfo contains current information
-					if(ccTrap.CapabilityMask.s.IsAutomaticMigrationSupported){
-							IB_LOG_INFINI_INFO_FMT(__func__, 
-									"Received an (IS_AUTOMATIC_MIGRATION_SUPPORTED %s) CAPABILITYMASK CHANGE [0x%.8X] trap from %s, TID="FMT_U64,
-									(portp->portData->portInfo.CapabilityMask.s.IsAutomaticMigrationSupported?"on":"off"),
-									ccTrap.CapabilityMask.AsReg32, desc, tid);
-					}
-					if(ccTrap.CapabilityMask.s.IsConnectionManagementSupported){
-							IB_LOG_INFINI_INFO_FMT(__func__, 
-									"Received an (IS_CONNECTION_MANAGEMENT_SUPPORTED %s) CAPABILITYMASK CHANGE [0x%.8X] trap from %s, TID="FMT_U64, 
-									(portp->portData->portInfo.CapabilityMask.s.IsConnectionManagementSupported?"on":"off"), 
-									ccTrap.CapabilityMask.AsReg32, desc, tid);
-					}
-					if (ccTrap.CapabilityMask.s.IsDeviceManagementSupported){
-							IB_LOG_INFINI_INFO_FMT(__func__, 
-									"Received an (IS_DEVICE_MANAGEMENT_SUPPORTED %s) CAPABILITYMASK CHANGE [0x%.8X] trap from %s, TID="FMT_U64, 
-									(portp->portData->portInfo.CapabilityMask.s.IsDeviceManagementSupported?"on":"off"),
-									ccTrap.CapabilityMask.AsReg32, desc, tid);
-					}
-					if(ccTrap.CapabilityMask.s.IsVendorClassSupported){
-							IB_LOG_INFINI_INFO_FMT(__func__, 
-									"Received an (IS_VENDOR_CLASS_SUPPORTED %s) CAPABILITYMASK CHANGE [0x%.8X] trap from %s, TID="FMT_U64, 
-									(portp->portData->portInfo.CapabilityMask.s.IsVendorClassSupported?"on":"off"),
-									ccTrap.CapabilityMask.AsReg32, desc, tid);
-					}
-					if(ccTrap.CapabilityMask.s.IsCapabilityMaskNoticeSupported){
-							IB_LOG_INFINI_INFO_FMT(__func__, 
-									"Received an (IS_CAPABILITY_MASK_NOTICE_SUPPORTED %s) CAPABILITYMASK CHANGE [0x%.8X] trap from %s, TID="FMT_U64, 
-									(portp->portData->portInfo.CapabilityMask.s.IsCapabilityMaskNoticeSupported?"on":"off"),
-									ccTrap.CapabilityMask.AsReg32, desc, tid);
-					}
+				if(ccTrap.CapabilityMask.s.IsAutomaticMigrationSupported){
+					IB_LOG_INFINI_INFO_FMT(__func__,
+							"Received an (IS_AUTOMATIC_MIGRATION_SUPPORTED %s) CAPABILITYMASK CHANGE [0x%.8X] trap from %s, TID="FMT_U64,
+							(ccTrapRef.CapabilityMask.s.IsAutomaticMigrationSupported?"on":"off"),
+							ccTrapRef.CapabilityMask.AsReg32, desc, tid);
+				}
+				if(ccTrap.CapabilityMask.s.IsConnectionManagementSupported){
+					IB_LOG_INFINI_INFO_FMT(__func__,
+							"Received an (IS_CONNECTION_MANAGEMENT_SUPPORTED %s) CAPABILITYMASK CHANGE [0x%.8X] trap from %s, TID="FMT_U64, 
+							(ccTrapRef.CapabilityMask.s.IsConnectionManagementSupported?"on":"off"), 
+							ccTrapRef.CapabilityMask.AsReg32, desc, tid);
+				}
+				if (ccTrap.CapabilityMask.s.IsDeviceManagementSupported){
+					IB_LOG_INFINI_INFO_FMT(__func__,
+							"Received an (IS_DEVICE_MANAGEMENT_SUPPORTED %s) CAPABILITYMASK CHANGE [0x%.8X] trap from %s, TID="FMT_U64, 
+							(ccTrapRef.CapabilityMask.s.IsDeviceManagementSupported?"on":"off"),
+							ccTrapRef.CapabilityMask.AsReg32, desc, tid);
+				}
+				if(ccTrap.CapabilityMask.s.IsVendorClassSupported){
+					IB_LOG_INFINI_INFO_FMT(__func__,
+							"Received an (IS_VENDOR_CLASS_SUPPORTED %s) CAPABILITYMASK CHANGE [0x%.8X] trap from %s, TID="FMT_U64, 
+							(ccTrapRef.CapabilityMask.s.IsVendorClassSupported?"on":"off"),
+							ccTrapRef.CapabilityMask.AsReg32, desc, tid);
+				}
+				if(ccTrap.CapabilityMask.s.IsCapabilityMaskNoticeSupported){
+					IB_LOG_INFINI_INFO_FMT(__func__,
+							"Received an (IS_CAPABILITY_MASK_NOTICE_SUPPORTED %s) CAPABILITYMASK CHANGE [0x%.8X] trap from %s, TID="FMT_U64, 
+							(ccTrapRef.CapabilityMask.s.IsCapabilityMaskNoticeSupported?"on":"off"),
+							ccTrapRef.CapabilityMask.AsReg32, desc, tid);
 				}
+				_copy_CapMaskTrap(&portp, &ccTrapRef);
 			}
-			(void)vs_rwunlock(&old_topology_lock);
+			vs_rwunlock(&old_topology_lock);
 		} else {
 			/* A local change has occurred. */
 			IB_LOG_INFINI_INFO_FMT( "sa_Trap", 
